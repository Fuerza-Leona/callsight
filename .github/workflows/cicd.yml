name: CICD

on:
  push:
    branches: ['main', 'staging']

jobs:
  ci:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check commit messages
        uses: wagoid/commitlint-github-action@v6
        with:
          configFile: commitlint.config.mjs

      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install dependencies
        run: npm ci # Clean install

      - name: Prepare .env
        run: |
          cat > .env << EOL
          SESSION_SECRET=${{ secrets.SESSION_SECRET }}
          NEXT_PUBLIC_BASE_API_URL=${{ vars.NEXT_PUBLIC_BASE_API_URL }}
          NEXT_PUBLIC_API_VERSION=${{ vars.NEXT_PUBLIC_API_VERSION }}
          EOL

      - name: Check linting
        run: npm run lint

      - name: Check format with Prettier
        run: npm run format

      - name: Build the app
        run: npm run build

      - name: Run tests
        run: npm run test

  cd:
    runs-on: ubuntu-latest
    needs: ci
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Prepare .env
        run: |
          cat > .env << EOL
          SESSION_SECRET=${{ secrets.SESSION_SECRET }}
          NEXT_PUBLIC_BASE_API_URL=${{ vars.NEXT_PUBLIC_BASE_API_URL }}
          NEXT_PUBLIC_API_VERSION=${{ vars.NEXT_PUBLIC_API_VERSION }}
          EOL

      - name: Install Vercel CLI
        run: npm install --global vercel

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ env.VERCEL_ENV }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --target=${{ env.VERCEL_ENV }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts
        run: vercel deploy --prebuilt --target=${{ env.VERCEL_ENV }} --token=${{ secrets.VERCEL_TOKEN }}
